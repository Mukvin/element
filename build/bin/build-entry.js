var Components = require('../../components.json');
var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'kyligence-ui/src/locale';
import CollapseTransition from 'kyligence-ui/src/transitions/collapse-transition';
import { getKyligenceConfiguration } from './utils/global-configuration';
// import './iconfont/iconfont.js';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.map(component => {
    Vue.component(component.name, component);
  });

  Vue.use(Loading.directive);

  const ELEMENT = {};
  ELEMENT.size = opts.size || '';
  ELEMENT.successMessageDuration = opts.successMessageDuration !== undefined ? opts.successMessageDuration : undefined;
  ELEMENT.successMessageShowClose = opts.successMessageShowClose !== undefined ? opts.successMessageShowClose : undefined;

  ELEMENT.warningMessageDuration = opts.warningMessageDuration !== undefined ? opts.warningMessageDuration : undefined;
  ELEMENT.warningMessageShowClose = opts.warningMessageShowClose !== undefined ? opts.warningMessageShowClose : undefined;

  ELEMENT.errorMessageDuration = opts.errorMessageDuration !== undefined ? opts.errorMessageDuration : undefined;
  ELEMENT.errorMessageShowClose = opts.errorMessageShowClose !== undefined ? opts.errorMessageShowClose : undefined;

  ELEMENT.infoMessageDuration = opts.infoMessageDuration !== undefined ? opts.infoMessageDuration : undefined;
  ELEMENT.infoMessageShowClose = opts.infoMessageShowClose !== undefined ? opts.infoMessageShowClose : undefined;

  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

  Vue.prototype.$ELEMENT = ELEMENT;
  Vue.prototype.$KY_ELEMENT = getKyligenceConfiguration(opts);

  Vue.nextTick(() => {
    document.getElementsByTagName('script').length > 0 && require('./iconfont/iconfont.js');
  });
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

module.exports = {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};

module.exports.default = module.exports;
`;

delete Components.font;

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  if (['Loading', 'MessageBox', 'Notification', 'Message'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }

  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

